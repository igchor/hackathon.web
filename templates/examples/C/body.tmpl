{{top "Allocating memory with desirable characteristics"}}

<p class="intro">

This example will demonstrate how to leverage high-level UMF API to request memory with desired characteristics (e.g. lowest latency).

<p>
Two important concepts for this excercise are: memspaces and memory targets.
<p>
A memory target respresents a single memory source like numa node, memory-mapped file, etc. A memory target can have certain properties that can be queried, like latency, bandwith or capacity.
<p>
A collection of memory targets is called a memspace. A memspace can be used as a means of memory discovery or for pool creation.
UMF exposes a few predefined memspaces that can be obtained using following functions:
<ul>
<li><tt>umfMemspaceHostAllGet()</tt> -  returns a memspace spanning all NUMA nodes in the system
<li><tt>umfMemspaceHighestBandwidthGet()</tt> - returns a memspace representing memory with the highest bandwith in the system
<li><tt>umfMemspaceHighestCapacityGet()</tt> - returns a memspace representing memory with the highest capacity in the system
<li><tt>umfMemspaceLowestLatencyGet()</tt> - returns a memspace representing memory with the lowest latency in the system
</ul>
<p>
The actual mapping of memspaces to the physical memory depends on available hardware. For example, this excercise is meant to be run on a machine with
CXL memory, which usually has higher capacity than any other memory on the system, hence, umfMemspaceHighestCapacityGet will return a memspace representing
that CXL memory (consisting of a single NUMA node or multiple NUMA nodes if there are more CXL devices).
<p>
Learn more here: https://oneapi-src.github.io/unified-memory-framework/api.html#memspace
<p>
{{step "Using memspaces in an application"}}

<p>
"memspace_hmat.c" ilustrates how to create various memspaces and use them to create memory pools
<p>

{{edit "memspace_hmat.c" "Makefile"}}

<p>

{{build "make"}}

<p>
If the programs built without errors, continue on to the next step below.

{{step "Run"}}

<p>

Of course, you should feel free to edit the script below and run it
again and again, to experiment with different commands.

{{edit "run_examples.sh"}}

<p>
Now you can try running the program using the above commands.

<p>

You can also use the script from example A to see if memory is allocated from a correct node.

{{run "./run_examples.sh"}}

<p>

{{summary}}

<p>

This example introduced concepts of memspaces and memory targets and showed how to leverage them in an application.

{{bottom}}

