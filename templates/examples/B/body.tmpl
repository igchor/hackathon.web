{{top "Basic UMF example"}}

<p class="intro">

One way of simplifying memory allocation path is using UMF. UMF (Unified Memory Framework) is a library for constructing allocators and memory pools. It also contains broadly useful abstractions and utilities for memory management. UMF allows users to manage multiple memory pools characterized by different attributes, allowing certain allocation types to be isolated from others and allocated using different hardware resources as required.

<p>
To learn more about UMF, visit: https://oneapi-src.github.io/unified-memory-framework/
<p>

{{step "Memory providers and memory pools"}}

<p>
A memory provider is an abstraction for coarse (memory page) allocations and deallocations of target memory types, such as host CPU, GPU, or CXL memory. A single distinct memory provider can efficiently operate the memory of devices on the platform or other memory sources such as file-backed or user-provider memory.
<p>
To instantiate a memory provider, user must pass an additional context which contains the details about the specific memory target that should be used. This would be a NUMA node mask for the OS memory provider, file path for the file-backed memory provider, etc. After creation, the memory provider context canâ€™t be changed.
<p>

A memory pool consists of a pool allocator and a memory provider instancies along with their properties and allocation policies. Memory pools are used by the allocation API as a first argument. There is also a possibility to retrieve a memory pool from an existing memory pointer that points to a memory previously allocated by UMF.
<p>


{{step "Using basic UMF functionality"}}

<p>

A detailed walkthrough of this example can be found here: https://oneapi-src.github.io/unified-memory-framework/examples.html#basic

<p>
"basic.c" ilustrates memory provider and memory pool concepts.
<p>

{{edit "basic.c" "Makefile"}}

<p>

{{build "make"}}

<p>
If the programs built without errors, continue on to the next step below.

{{step "Run"}}

<p>

Of course, you should feel free to edit the script below and run it
again and again, to experiment with different commands.

{{edit "run_examples.sh"}}

<p>
Now you can try running the program using the above commands.

{{run "./run_examples.sh"}}

<p>

{{summary}}

<p>

This example introduced concepts of memory provider and memory pool and showed how to use basic UMF functionality.

{{bottom}}

